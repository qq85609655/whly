<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hailian.whly.report.dao.FrontCompanyReportDao">
    
	<sql id="frontCompanyReportColumns">
		a.id AS "id",
		a.year AS "year",
		a.month AS "month",
		a.report_time AS "reportTime",
		a.company_id AS "companyId",
		a.type_id AS "typeId",
		a.area_id AS "area.id",
		a.emp_quantity AS "empQuantity",
		a.total_income AS "totalIncome",
		a.total_profit AS "totalProfit",
		a.total_tax AS "totalTax",
		a.insert_time AS "insertTime",
		a.update_time AS "updateTime",
		a.operator AS "operator",
		
		fcp.project_name AS "projectName",
		fcp.project_content AS "projectContent",
		fcp.project_desired_effect AS "projectDesiredEffect",
		fcp.year_limit AS "yearLimit",
		fcp.total_investment AS "totalInvestment",
		fcp.bank_loan_amount AS "bankLoanAmount", 
		a.project_evolve AS "projectEvolve",
		a.month_investment AS "monthInvestment",
		
		a.status AS "status",
		CASE `status` 
         WHEN 'PASSED' THEN '已审核' 
         WHEN 'SUBMIT' THEN '已提交' 
		 WHEN 'UNPASSED' THEN '未通过' 
		 END as statusName,
		a.reason AS "reason",
		a.remarks AS "remarks",
		a.create_by AS "createBy.id",
		a.operating_costs AS "operatingCosts",
		a.employee_compensation AS "employeeCompensation",
		a.loan_amount AS "loanAmount",
		a.order_quantity AS "orderQuantity",
		fn.id AS "notificationId",
		<!-- a.create_date AS "createDate", -->
		a.update_by AS "updateBy.id",
		<!-- a.update_date AS "updateDate", -->
		a.del_flag AS "delFlag",
		a7.name AS "area.name",
		sd.description AS "description",
		o5.name AS "companyName",
		o5.address AS "address"
		
		
	</sql>
	
	<sql id="frontCompanyReportJoins">
		LEFT JOIN sys_office o5 ON o5.id = a.company_id
		LEFT JOIN sys_area a7 ON a7.id = a.area_id
		LEFT JOIN sys_dict sd ON sd.id = a.type_id
		LEFT JOIN front_notification fn ON fn.report_id = a.id
		LEFT JOIN front_company_project fcp ON fcp.company_id = a.company_id
	</sql>
    
	<select id="get" resultType="com.hailian.whly.report.entity.FrontCompanyReport" >
		SELECT 
			<include refid="frontCompanyReportColumns"/>
		FROM front_company_report a
			<include refid="frontCompanyReportJoins"/>
		WHERE a.id = #{id}
	</select>
	
	<select id="getProjectById" resultType="com.hailian.whly.report.entity.FrontCompanyReport" >
		SELECT 
			o5.name AS "companyName",
			a.id AS "id",
			a.company_id AS "companyId",
			a.type_id AS "typeId",
			a.area_id AS "area.id",
			a.project_name AS "projectName",
			a.project_content AS "projectContent",
			a.project_desired_effect AS "projectDesiredEffect",
			a.year_limit AS "yearLimit",
			a.total_investment AS "totalInvestment",
			a.bank_loan_amount AS "bankLoanAmount"
			
		FROM front_company_project a
			LEFT JOIN sys_office o5 ON o5.id = a.company_id
		WHERE a.company_id = #{companyId}
	</select>
	
	<select id="getBancklogNumber" resultType="int"  parameterType="com.hailian.whly.report.entity.FrontCompanyReport" >
		SELECT 
			count(a.id)
		FROM front_company_report a
			<include refid="frontCompanyReportJoins"/>
		WHERE a.status = #{status }  
			  AND o5.parent_id = #{companyParentId }
	</select>
	
	<select id="findReport" resultType="com.hailian.whly.report.entity.FrontCompanyReport" parameterType="com.hailian.whly.report.entity.FrontCompanyReport">
		SELECT 
			<include refid="frontCompanyReportColumns"/>
		FROM front_company_report a
		<include refid="frontCompanyReportJoins"/>
		<where> 
			<if test="id != null and id != ''">
				a.id = #{id} 
			</if>
			<if test="companyId != null and companyId != ''">
				and a.company_id = #{companyId}
			</if>
		</where>
		ORDER BY a.create_date DESC
	</select>
	
	<!-- <select id="findReport1" resultType="com.hailian.whly.report.entity.FrontCompanyReport" parameterType="com.hailian.whly.report.entity.FrontCompanyReport">
		SELECT 
			<include refid="frontCompanyReportColumns"/>
		FROM front_company_report a
		<include refid="frontCompanyReportJoins"/>
		<where> 
				(a.year &lt; #{year} or (a.year = #{year} and a.month &lt; #{month}))   and  a.status = "PASSED"
		</where>
	</select> -->
	<select id="findList" resultType="com.hailian.whly.report.entity.FrontCompanyReport">
		SELECT 
			<include refid="frontCompanyReportColumns"/>
		FROM front_company_report a
			<include refid="frontCompanyReportJoins"/>
		<where>
			<if test="year != null and year != ''">
				AND a.year = #{year}
			</if>
			<if test="month != null and month != ''">
				AND a.month = #{month}
			</if>
			<if test="reportTime != null and reportTime != ''">
				AND a.report_time = #{reportTime}
			</if>
			<if test="companyId != null and companyId != ''">
				AND a.company_id = #{companyId}
			</if>
			<if test="area != null and area.id != null and area.id != ''">
				AND a.area_id = #{area.id}
			</if>
			<if test="totalProfit != null and totalProfit != ''">
				AND a.total_profit = #{totalProfit}
			</if>
			<if test="beginInsertTime != null and endInsertTime != null and beginInsertTime != '' and endInsertTime != ''">
				AND a.insert_time BETWEEN #{beginInsertTime} AND #{endInsertTime}
			</if>
			<if test="status != null and status != ''">
				AND a.status = #{status}
			</if>
			<if test="typeId != null and typeId != ''">
				AND a.type_id = #{typeId}
			</if>
			<if test="projectName != null and projectName != ''">
				AND a.project_name like CONCAT(CONCAT('%', #{projectName}), '%') 
			</if>
			<if test="companyName != null and companyName != ''">
				AND o5.name like CONCAT(CONCAT('%', #{companyName}), '%')
			</if>
			<!-- <if test="companyParentId != null and companyParentId != ''">
				AND o5.parent_ids in #{companyParentId } 
			</if> -->
			<if test="companyParentId != null and companyParentId != ''">
				AND o5.parent_ids like CONCAT(CONCAT('%', #{companyParentId}), '%') 
			</if>
		</where>
		<!-- <choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY insert_time desc
			</otherwise>
		</choose> -->
		ORDER BY insert_time desc
	</select>
	
	<select id="findAllList" resultType="com.hailian.whly.report.entity.FrontCompanyReport">
		SELECT 
			<include refid="frontCompanyReportColumns"/>
		FROM front_company_report a
		<include refid="frontCompanyReportJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
			and a.report_time is not null
		</where>		
		<!-- <choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose> -->
		ORDER BY a.insert_time desc
	</select>
	
	
	
	<insert id="insert1" parameterType="com.hailian.whly.report.entity.FrontCompanyReport">
	
		INSERT INTO front_company_report(
			id,
			year,
			month,
			report_time,
			company_id,
			type_id,
			area_id,
			emp_quantity,
			total_income,
			total_profit,
			total_tax,
			insert_time,
			update_time,
			operator,
			
			project_evolve,
			month_investment,
			
			status,
			reason,
			remarks,
			create_by,
			create_date,
			update_by,
			update_date,
			operating_costs,
			employee_compensation,
			loan_amount,
			order_quantity,
			del_flag
		) VALUES (
			#{id},
			#{year},
			#{month},
			#{reportTime},
			#{companyId},
			#{typeId},
			#{area.id},
			#{empQuantity},
			#{totalIncome},
			#{totalProfit},
			#{totalTax},
			#{insertTime},
			#{updateTime},
			#{operator},
			
			#{projectEvolve},
			#{monthInvestment},
			
			#{status},
			#{reason},
			#{remarks},
			#{createBy.id},
			#{createDate},
			#{updateBy.id},
			#{updateDate},
			#{operatingCosts},
			#{employeeCompensation},
			#{loanAmount},
			#{orderQuantity},
			#{delFlag}
		)
	</insert>
	
	<insert id="addQuestion" parameterType="com.hailian.whly.report.entity.FrontReportQuestion">
		INSERT INTO front_report_question(
			id,
			month,
			title,
			content,
			company_id,
			report_id,
			operator,
			create_date,
			update_date,
			remarks,
			del_flag
		) VALUES (
			#{id},
			#{month},
			#{title},
			#{content},
			#{companyId},
			#{reportId},
			#{operator},
			#{createDate},
			#{updateDate},
			#{remarks},
			#{delFlag}
		)
	</insert>
	
	<update id="updateReport" parameterType="com.hailian.whly.report.entity.FrontCompanyReport">
		UPDATE front_company_report SET 
			<if test="status != null and status != ''">
				status = #{status},
			</if>	
			<if test="empQuantity != null and empQuantity != ''">
				emp_quantity = #{empQuantity},
			</if>
			<if test="totalIncome != null and totalIncome != ''">
				total_income = #{totalIncome},
			</if>
			<if test="totalProfit != null and totalProfit != ''">
				total_profit = #{totalProfit},
			</if>
			<if test="totalTax != null and totalTax != ''">
				total_tax = #{totalTax},
			</if>
			<if test="operatingCosts != null and operatingCosts != ''">
				operating_costs = #{operatingCosts},
			</if>
			<if test="employeeCompensation != null and employeeCompensation != ''">
				employee_compensation = #{employeeCompensation},
			</if>
			<if test="loanAmount != null and loanAmount != ''">
				loan_amount = #{loanAmount},
			</if>
			<if test="orderQuantity != null and orderQuantity != ''">
				order_quantity = #{orderQuantity},
			</if>
			<if test="reason != null and reason != ''">
				reason = #{reason},
			</if>
			
			<if test="projectEvolve != null and projectEvolve != ''">
				project_evolve = #{projectEvolve},
			</if>
			<if test="monthInvestment != null and monthInvestment != ''">
				month_investment = #{monthInvestment},
			</if>
			
			
			
			update_time = #{updateTime}
		WHERE id = #{id}
	</update>
	
	<update id="updateQuestion" parameterType="com.hailian.whly.report.entity.FrontReportQuestion">
		UPDATE front_report_question SET
			<if test="title != null and title != ''">
				title = #{title},
			</if>	
			<if test="content != null and content != ''">
				content = #{content},
			</if>	
			<if test="updateDate != null and updateDate != ''">
				update_date = #{updateDate},
			</if>	
			del_flag = #{delFlag}
		WHERE id = #{id}
	</update>
	
	<update id="delete">
		UPDATE front_company_report SET 
			del_flag = #{DEL_FLAG_DELETE}
		WHERE id = #{id}
	</update>
	
	<select id="statisticsReportByDate" parameterType="java.util.Map" resultType="com.hailian.whly.report.entity.FrontCompanyReport">
		select
			date_format(r.insert_time, '%Y/%m') as name,
			count(
				date_format(r.insert_time, '%Y/%m')
			) as count
		from
			front_company_report r
		where
			 r.del_flag = 0
			<if test="status != null and status != ''">
					AND r.status = #{status}
			</if>
			<if test="companyId != null and companyId != ''">
					AND r.company_id in(select id from sys_office where parent_ids like CONCAT(CONCAT('%', #{companyId}), '%')) 
			</if>
			AND date_format(r.insert_time, '%Y/%m') in
			 <foreach collection="dateList" index="index" item="item" open="(" separator="," close=")">  
		        #{item}  
		    </foreach>  
		group by
			date_format(r.insert_time, '%Y/%m')
		order by
			date_format(r.insert_time, '%Y/%m') 
	</select>
	
	<select id="statisticsCountByStatus" parameterType="java.util.Map" resultType="com.hailian.whly.report.entity.FrontCompanyReport">
		select
			status as name,
			count(1) as count
		from
			`front_company_report`
		where
			del_flag = 0
			and `status` is not null
			<if test="companyId != null and companyId != ''">
					AND company_id in(select id from sys_office where parent_ids like CONCAT(CONCAT('%', #{companyId}), '%')) 
			</if>
			<if test="startDate != null and startDate  != ''">
					and insert_time  &gt;= #{startDate}
			</if>
			<if test="endDate != null and endDate  != ''">
					and insert_time  &lt;= #{endDate}
			</if>
		group by
			`status`
	</select>
	
	<select id="statisticsCountByOffice" parameterType="string" resultType="com.hailian.whly.report.entity.FrontCompanyReport">
		SELECT
			'NOTREPORT' AS name,
			count(1) AS count
		FROM
			sys_office
		WHERE
			area_id is not null AND area_id != "" AND
			parent_ids like CONCAT(CONCAT('%', #{companyId}), '%')
	</select>
	
	<select id="statisticsCountByType" parameterType="java.util.Map" resultType="com.hailian.whly.report.entity.FrontCompanyReport">
		select
			d.label as name,
			count(1) as count
		from
			front_company_report r
		left join sys_dict d on d.id=r.type_id
		where
			r.del_flag = 0
			and r.`status` is not null
			<if test="companyId != null and companyId != ''">
					AND company_id in(select id from sys_office where parent_ids like CONCAT(CONCAT('%', #{companyId}), '%')) 
			</if>
			<if test="status != null and status != ''">
					AND r.status = #{status}
			</if>
			AND date_format(r.insert_time, '%Y/%m') in
			 <foreach collection="dateList" index="index" item="item" open="(" separator="," close=")">  
		        #{item}  
		    </foreach>
		group by r.type_id
		order by d.sort

	</select>
	
	<delete id="deleteQuestion" parameterType="string">
		delete 
			from front_report_question
		where 
			id = #{questionId}
	</delete>
	
	<select id="findQuestion" parameterType="String"  resultType="com.hailian.whly.report.entity.FrontReportQuestion">
		SELECT
			frq.id AS "id",
			frq.month AS "month",
			frq.title AS "title",
			frq.content AS "content",
			frq.company_id AS "companyId",
			frq.report_id AS "reportId",
			frq.operator AS "operator",
			frq.create_by AS "createBy",
			frq.create_date AS "createDate",
			frq.update_by AS "updateBy",
			frq.update_date AS "updateDate",
			frq.remarks AS "remarks",
			frq.del_flag AS "delFlag"
		FROM 
			front_company_report fcr 
			LEFT JOIN  front_report_question frq ON frq.report_id = fcr.id
		WHERE 
			fcr.id = #{reportId} and
			frq.del_flag = "0"
		ORDER BY frq.update_date DESC
	</select>
	
	<select id="findOfficeById" parameterType="String"  resultType="com.thinkgem.jeesite.modules.sys.entity.Office">
		SELECT
			so.id AS "id",
			so.name AS "name",
			so.area_id AS "area.id",
			so.industy_id AS "industyId",
			so.type AS "type",
			so.master AS "master"
		FROM 
			sys_office so 
		WHERE 
			so.id = #{companyId} and
			so.del_flag = "0"
	</select>
	
	<select id="findHistroy" parameterType="String"  resultType="com.hailian.whly.report.entity.FrontReportHistory">
		SELECT
			frh.id AS "id",
			frh.report_id AS "reportId",
			frh.description AS "description",
			frh.operate_time AS "operateTime",
			frh.operation AS "operation",
			frh.operator AS "operator",
			frh.create_date AS "createDate",
			frh.update_date AS "updateDate",
			frh.create_by AS "createBy.name",
			frh.remarks AS "remarks",
			frh.del_flag AS "delFlag"
			
		FROM 
			front_report_history frh 
		WHERE 
			frh.report_id = #{reportId} and
			frh.del_flag = "0"
		ORDER BY frh.create_date
	</select>
	
	<insert id="addHistroy" parameterType="com.hailian.whly.report.entity.FrontReportHistory">
		INSERT INTO front_report_history(
			id,
			report_id,
			description,
			operate_time,
			operation,
			operator,
			create_date,
			update_date,
			create_by,
			remarks,
			del_flag
		) VALUES (
			#{id},
			#{reportId},
			#{description},
			#{operateTime},
			#{operation},
			#{operator},
			#{createDate},
			#{updateDate},
			#{createBy.name},
			#{remarks},
			#{delFlag}
		)
	</insert>
	
	<select id="findReportByReportId" parameterType="String" resultType="com.hailian.whly.report.entity.FrontCompanyReport" >
		SELECT 
			<include refid="frontCompanyReportColumns"/>
		FROM front_company_report a
			<include refid="frontCompanyReportJoins"/>
		WHERE 
			a.company_id = (SELECT fcr.company_id
							FROM front_company_report fcr
							WHERE fcr.id = #{id} )
		ORDER BY a.create_date DESC
	</select>
	
	<select id="getHistory" parameterType="java.util.Map" resultType="com.hailian.whly.report.entity.FrontReportHistory">
		SELECT
			t.id id,
			t.report_id reportId,
			t.description description,
			t.operate_time operateTime,
			t.operation operation,
			t.operator operator,
			t.create_date createDate,
			t.update_by updateBy,
			t.update_date updateDate,
			t.create_by createBy,
			t.remarks remarks,
			t.del_flag delFlag
		FROM
			front_report_history t
		WHERE
			t.report_id = #{reportId}
		ORDER BY
			t.update_date DESC
	</select>
	
	<select id="getTopMonth" parameterType="java.util.Map" resultType="com.hailian.whly.report.entity.FrontCompanyReport" >
		SELECT
			a.id AS "id",
		a.year AS "year",
		a.month AS "month",
		a.report_time AS "reportTime",
		a.company_id AS "companyId",
		a.type_id AS "typeId",
		a.area_id AS "area.id",
		a.emp_quantity AS "empQuantity",
		a.total_income AS "totalIncome",
		a.total_profit AS "totalProfit",
		a.total_tax AS "totalTax",
		a.insert_time AS "insertTime",
		a.update_time AS "updateTime",
		a.operator AS "operator",
		a.status AS "status",
		a.reason AS "reason",
		a.remarks AS "remarks",
		a.create_by AS "createBy.id",
		a.operating_costs AS "operatingCosts",
		a.employee_compensation AS "employeeCompensation",
		a.loan_amount AS "loanAmount",
		a.order_quantity AS "orderQuantity"
		FROM
			front_company_report a
		<if test="companyId != null and companyId != ''">
				WHERE a.company_id = #{companyId}
		</if>
		ORDER BY
			a. YEAR DESC,
			a. MONTH DESC
	</select>
	
	<select id="getCurrentInvestmentByCompanyID" parameterType="String" resultType="com.hailian.whly.report.entity.FrontCompanyReport" >
		SELECT
			SUM(month_investment) AS "currentInvestment"
		FROM
			front_company_report
		WHERE 
			company_id = #{companyId}
	</select>
	
</mapper>
