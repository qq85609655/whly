<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hailian.whly.report.dao.FrontCompanyReportDao">
    
	<sql id="frontCompanyReportColumns">
		a.id AS "id",
		a.year AS "year",
		a.month AS "month",
		a.report_time AS "reportTime",
		a.company_id AS "companyId",
		a.type_id AS "typeId",
		a.area_id AS "area.id",
		a.emp_quantity AS "empQuantity",
		a.total_income AS "totalIncome",
		a.total_profit AS "totalProfit",
		a.total_tax AS "totalTax",
		a.insert_time AS "insertTime",
		a.update_time AS "updateTime",
		a.operator AS "operator",
		a.status AS "status",
		a.reason AS "reason",
		a.remarks AS "remarks",
		a.create_by AS "createBy.id",
		a.operating_costs AS "operatingCosts",
		a.employee_compensation AS "employeeCompensation",
		a.loan_amount AS "loanAmount",
		a.order_quantity AS "orderQuantity",
		
		<!-- a.create_date AS "createDate", -->
		a.update_by AS "updateBy.id",
		<!-- a.update_date AS "updateDate", -->
		a.del_flag AS "delFlag",
		a7.name AS "area.name",
		sd.description AS "description"
		
		
		
	</sql>
	
	<sql id="frontCompanyReportJoins">
		LEFT JOIN sys_office o5 ON o5.id = a.company_id
		LEFT JOIN sys_area a7 ON a7.id = a.area_id
		LEFT JOIN sys_dict sd ON sd.id = a.type_id
	</sql>
    
	<select id="get" resultType="com.hailian.whly.report.entity.FrontCompanyReport" >
		SELECT 
			<include refid="frontCompanyReportColumns"/>
		FROM front_company_report a
		<include refid="frontCompanyReportJoins"/>
		WHERE a.id = #{id}
	</select>
	
	<select id="findQuestion" parameterType="String"  resultType="com.hailian.whly.report.entity.FrontReportQuestion">
		SELECT
			frq.id AS "id",
			frq.month AS "month",
			frq.title AS "title",
			frq.content AS "content",
			frq.company_id AS "companyId",
			frq.report_id AS "reportId",
			frq.operator AS "operator",
			frq.create_by AS "createBy",
			frq.create_date AS "createDate",
			frq.update_by AS "updateBy",
			frq.update_date AS "updateDate",
			frq.remarks AS "remarks",
			frq.del_flag AS "delFlag"
		FROM 
			front_company_report fcr 
			LEFT JOIN  front_report_question frq ON frq.report_id = fcr.id
		WHERE 
			fcr.id = #{reportId}
		ORDER BY frq.update_date DESC
	</select>
	
	<select id="findList" resultType="com.hailian.whly.report.entity.FrontCompanyReport">
		SELECT 
			<include refid="frontCompanyReportColumns"/>
		FROM front_company_report a
		<include refid="frontCompanyReportJoins"/>
		<where>
			<if test="year != null and year != ''">
				AND a.year = #{year}
			</if>
			<if test="month != null and month != ''">
				AND a.month = #{month}
			</if>
			<if test="reportTime != null and reportTime != ''">
				AND a.report_time = #{reportTime}
			</if>
			<if test="companyId != null and companyId != ''">
				AND a.company_id = #{companyId}
			</if>
			<if test="area != null and area.id != null and area.id != ''">
				AND a.area_id = #{area.id}
			</if>
			<if test="totalProfit != null and totalProfit != ''">
				AND a.total_profit = #{totalProfit}
			</if>
			<if test="beginInsertTime != null and endInsertTime != null and beginInsertTime != '' and endInsertTime != ''">
				AND a.insert_time BETWEEN #{beginInsertTime} AND #{endInsertTime}
			</if>
			<if test="status != null and status != ''">
				AND a.status = #{status}
			</if>
			<if test="typeId != null and typeId != ''">
				AND a.type_id = #{typeId}
			</if>
			<if test="operator != null and operator != ''">
				AND a.operator like CONCAT(CONCAT('%', #{operator}), '%')
			</if>
			and a.report_time is not null
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>
	
	<select id="findAllList" resultType="com.hailian.whly.report.entity.FrontCompanyReport">
		SELECT 
			<include refid="frontCompanyReportColumns"/>
		FROM front_company_report a
		<include refid="frontCompanyReportJoins"/>
		<where>
			a.del_flag = #{DEL_FLAG_NORMAL}
			and a.report_time is not null
		</where>		
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.update_date DESC
			</otherwise>
		</choose>
	</select>
	
	
	
	<insert id="insert1" parameterType="com.hailian.whly.report.entity.FrontCompanyReport">
		INSERT INTO front_company_report(
			id,
			year,
			month,
			report_time,
			company_id,
			type_id,
			area_id,
			emp_quantity,
			total_income,
			total_profit,
			total_tax,
			insert_time,
			update_time,
			operator,
			status,
			reason,
			remarks,
			create_by,
			create_date,
			update_by,
			update_date,
			operating_costs,
			employee_compensation,
			loan_amount,
			order_quantity,
			del_flag
		) VALUES (
			#{id},
			#{year},
			#{month},
			#{reportTime},
			#{companyId},
			#{typeId},
			#{area.id},
			#{empQuantity},
			#{totalIncome},
			#{totalProfit},
			#{totalTax},
			#{insertTime},
			#{updateTime},
			#{operator},
			#{status},
			#{reason},
			#{remarks},
			#{createBy.id},
			#{createDate},
			#{updateBy.id},
			#{updateDate},
			#{operatingCosts},
			#{employeeCompensation},
			#{loanAmount},
			#{orderQuantity},
			#{delFlag}
		)
	</insert>
	
	<insert id="addQuestion" parameterType="com.hailian.whly.report.entity.FrontReportQuestion">
		INSERT INTO front_report_question(
			id,
			month,
			title,
			content,
			company_id,
			report_id,
			operator,
			create_date,
			update_date,
			remarks,
			del_flag
		) VALUES (
			#{id},
			#{month},
			#{title},
			#{companyId},
			#{reportId},
			#{operator},
			#{createDate},
			#{updateDate},
			#{remarks},
			#{delFlag}
		)
	</insert>
	
	<update id="update">
		UPDATE front_company_report SET 	
			year = #{year},
			month = #{month},
			report_time = #{reportTime},
			company_id = #{companyId},
			type_id = #{typeId},
			area_id = #{area.id},
			emp_quantity = #{empQuantity},
			total_income = #{totalIncome},
			total_profit = #{totalProfit},
			total_tax = #{totalTax},
			insert_time = #{insertTime},
			update_time = #{updateTime},
			operator = #{operator},
			status = #{status},
			reason = #{reason},
			remarks = #{remarks},
			update_by = #{updateBy.id},
			update_date = #{updateDate}
		WHERE id = #{id}
	</update>
	
	<update id="delete">
		UPDATE front_company_report SET 
			del_flag = #{DEL_FLAG_DELETE}
		WHERE id = #{id}
	</update>
	
	<select id="statisticsReportByDate" parameterType="java.util.Map" resultType="com.hailian.whly.report.entity.FrontCompanyReport">
		select
			date_format(r.insert_time, '%Y/%m') as name,
			count(
				date_format(r.insert_time, '%Y/%m')
			) as count
		from
			front_company_report r
		where
		 r.del_flag = 0
		<if test="status != null and status != ''">
				AND r.status = #{status}
		</if>
		and date_format(r.insert_time, '%Y/%m') in
		 <foreach collection="dateList" index="index" item="item" open="(" separator="," close=")">  
	        #{item}  
	    </foreach>  
		group by
			date_format(r.insert_time, '%Y/%m')
		order by
			date_format(r.insert_time, '%Y/%m') 
	</select>
	
	<select id="statisticsCountByStatus" parameterType="java.util.Map" resultType="com.hailian.whly.report.entity.FrontCompanyReport">
		select
			status as name,
			count(1) as count
		from
			`front_company_report`
		where
			del_flag = 0
		<if test="startDate != null and startDate  != ''">
				and insert_time  &gt;= #{startDate}
		</if>
		<if test="endDate != null and endDate  != ''">
				and insert_time  &lt;= #{endDate}
		</if>
		group by
			`status`
	</select>
	
	<select id="statisticsCountByType" parameterType="java.util.Map" resultType="com.hailian.whly.report.entity.FrontCompanyReport">
		select
			d.label as name,
			count(1) as count
		from
			front_company_report r
		left join sys_dict d on d.id=r.type_id
		where
			r.del_flag = 0
		<if test="status != null and status != ''">
				and r.status = #{status}
		</if>
		group by r.type_id
		order by d.sort

	</select>
	
</mapper>